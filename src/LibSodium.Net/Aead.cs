
// <auto-generated />

namespace LibSodium
{
    /// <summary>
    /// Provides high-level access to the XChaCha20-Poly1305 AEAD construction from Libsodium.
    /// </summary>
    /// <remarks>
    /// This class supports both combined and detached modes of authenticated encryption.
    /// It also supports automatic nonce generation when not provided explicitly.
    /// </remarks>
    public static class XChaCha20Poly1305
    {
        /// <summary>
        /// Key length in bytes (32).
        /// </summary>
        public static int KeyLen => LowLevel.XChaCha20Poly1305.KeyLen;

        /// <summary>
        /// Nonce length in bytes (24).
        /// </summary>
        public static int NonceLen => LowLevel.XChaCha20Poly1305.NonceLen;

        /// <summary>
        /// MAC length in bytes (16).
        /// </summary>
        public static int MacLen => LowLevel.XChaCha20Poly1305.MacLen;

        /// <summary>
        /// Encrypts a message using XChaCha20-Poly1305. Supports combined and detached modes,
        /// with optional AAD and nonce.
        /// </summary>
        /// <param name="ciphertext">The buffer where the ciphertext will be written. It can be longer than needed.</param>
        /// <param name="plaintext">The message to encrypt.</param>
        /// <param name="key">The secret encryption key (32 bytes).</param>
        /// <param name="mac">
        /// Optional. If provided, the encryption is done in detached mode and the MAC (16 bytes) is written here.
        /// Otherwise, combined mode is used.
        /// </param>
        /// <param name="aad">
        /// Optional additional authenticated data. Not encrypted, but authenticated.
        /// </param>
        /// <param name="nonce">
        /// Optional nonce (24 bytes). If not provided, a random nonce is generated and prepended (combined) or returned (detached).
        /// </param>
        /// <returns>
        /// The span representing the full ciphertext, including MAC and possibly nonce.
        /// </returns>
        /// <exception cref="ArgumentException">Thrown when buffer sizes are incorrect or parameters are invalid.</exception>
        /// <exception cref="LibSodiumException">Thrown when encryption fails.</exception>
        public static Span<byte> Encrypt(
            Span<byte> ciphertext,
            ReadOnlySpan<byte> plaintext,
            ReadOnlySpan<byte> key,
            Span<byte> mac = default,
            ReadOnlySpan<byte> aad = default,
            ReadOnlySpan<byte> nonce = default)
            => AeadCore<LowLevel.XChaCha20Poly1305>.Encrypt(ciphertext, plaintext, key, mac, aad, nonce);

        /// <summary>
        /// Decrypts a message using XChaCha20-Poly1305. Supports combined and detached modes,
        /// with optional AAD and nonce.
        /// </summary>
        /// <param name="plaintext">The buffer where the decrypted message will be written.</param>
        /// <param name="ciphertext">
        /// The encrypted message. May include MAC and nonce (combined) or exclude them (detached).
        /// </param>
        /// <param name="key">The secret decryption key (32 bytes).</param>
        /// <param name="mac">
        /// Optional. If provided, decryption is done in detached mode. Otherwise, combined mode is used..
        /// </param>
        /// <param name="aad">
        /// Optional additional authenticated data. Must match what was used for encryption.
        /// </param>
        /// <param name="nonce">
        /// Optional nonce (24 bytes). Required for manual nonce mode.
        /// </param>
        /// <returns>The span representing the decrypted plaintext.</returns>
        /// <exception cref="ArgumentException">Thrown when buffer sizes are incorrect or parameters are invalid.</exception>
        /// <exception cref="LibSodiumException">Thrown when MAC verification fails or decryption fails.</exception>
        public static Span<byte> Decrypt(
            Span<byte> plaintext,
            ReadOnlySpan<byte> ciphertext,
            ReadOnlySpan<byte> key,
            ReadOnlySpan<byte> mac = default,
            ReadOnlySpan<byte> aad = default,
            ReadOnlySpan<byte> nonce = default)
            => AeadCore<LowLevel.XChaCha20Poly1305>.Decrypt(plaintext, ciphertext, key, mac, aad, nonce);
    }

    /// <summary>
    /// Provides high-level access to the AEGIS-256 AEAD construction from Libsodium.
    /// </summary>
    /// <remarks>
    /// This class supports both combined and detached modes of authenticated encryption.
    /// It also supports automatic nonce generation when not provided explicitly.
    /// </remarks>
    public static class Aegis256
    {
        /// <summary>
        /// Key length in bytes (32).
        /// </summary>
        public static int KeyLen => LowLevel.Aegis256.KeyLen;

        /// <summary>
        /// Nonce length in bytes (32).
        /// </summary>
        public static int NonceLen => LowLevel.Aegis256.NonceLen;

        /// <summary>
        /// MAC length in bytes (32).
        /// </summary>
        public static int MacLen => LowLevel.Aegis256.MacLen;

        /// <summary>
        /// Encrypts a message using AEGIS-256. Supports combined and detached modes,
        /// with optional AAD and nonce.
        /// </summary>
        /// <param name="ciphertext">The buffer where the ciphertext will be written. It can be longer than needed.</param>
        /// <param name="plaintext">The message to encrypt.</param>
        /// <param name="key">The secret encryption key (32 bytes).</param>
        /// <param name="mac">
        /// Optional. If provided, the encryption is done in detached mode and the MAC (32 bytes) is written here.
        /// Otherwise, combined mode is used.
        /// </param>
        /// <param name="aad">
        /// Optional additional authenticated data. Not encrypted, but authenticated.
        /// </param>
        /// <param name="nonce">
        /// Optional nonce (32 bytes). If not provided, a random nonce is generated and prepended (combined) or returned (detached).
        /// </param>
        /// <returns>
        /// The span representing the full ciphertext, including MAC and possibly nonce.
        /// </returns>
        /// <exception cref="ArgumentException">Thrown when buffer sizes are incorrect or parameters are invalid.</exception>
        /// <exception cref="LibSodiumException">Thrown when encryption fails.</exception>
        public static Span<byte> Encrypt(
            Span<byte> ciphertext,
            ReadOnlySpan<byte> plaintext,
            ReadOnlySpan<byte> key,
            Span<byte> mac = default,
            ReadOnlySpan<byte> aad = default,
            ReadOnlySpan<byte> nonce = default)
            => AeadCore<LowLevel.Aegis256>.Encrypt(ciphertext, plaintext, key, mac, aad, nonce);

        /// <summary>
        /// Decrypts a message using AEGIS-256. Supports combined and detached modes,
        /// with optional AAD and nonce.
        /// </summary>
        /// <param name="plaintext">The buffer where the decrypted message will be written.</param>
        /// <param name="ciphertext">
        /// The encrypted message. May include MAC and nonce (combined) or exclude them (detached).
        /// </param>
        /// <param name="key">The secret decryption key (32 bytes).</param>
        /// <param name="mac">
        /// Optional. If provided, decryption is done in detached mode. Otherwise, combined mode is used..
        /// </param>
        /// <param name="aad">
        /// Optional additional authenticated data. Must match what was used for encryption.
        /// </param>
        /// <param name="nonce">
        /// Optional nonce (32 bytes). Required for manual nonce mode.
        /// </param>
        /// <returns>The span representing the decrypted plaintext.</returns>
        /// <exception cref="ArgumentException">Thrown when buffer sizes are incorrect or parameters are invalid.</exception>
        /// <exception cref="LibSodiumException">Thrown when MAC verification fails or decryption fails.</exception>
        public static Span<byte> Decrypt(
            Span<byte> plaintext,
            ReadOnlySpan<byte> ciphertext,
            ReadOnlySpan<byte> key,
            ReadOnlySpan<byte> mac = default,
            ReadOnlySpan<byte> aad = default,
            ReadOnlySpan<byte> nonce = default)
            => AeadCore<LowLevel.Aegis256>.Decrypt(plaintext, ciphertext, key, mac, aad, nonce);
    }

    /// <summary>
    /// Provides high-level access to the AES256-GCM AEAD construction from Libsodium.
    /// </summary>
    /// <remarks>
    /// This class supports both combined and detached modes of authenticated encryption.
    /// It also supports automatic nonce generation when not provided explicitly.
    /// </remarks>
    public static class Aes256Gcm
    {
        /// <summary>
        /// Key length in bytes (32).
        /// </summary>
        public static int KeyLen => LowLevel.Aes256Gcm.KeyLen;

        /// <summary>
        /// Nonce length in bytes (12).
        /// </summary>
        public static int NonceLen => LowLevel.Aes256Gcm.NonceLen;

        /// <summary>
        /// MAC length in bytes (16).
        /// </summary>
        public static int MacLen => LowLevel.Aes256Gcm.MacLen;

        /// <summary>
        /// Encrypts a message using AES256-GCM. Supports combined and detached modes,
        /// with optional AAD and nonce.
        /// </summary>
        /// <param name="ciphertext">The buffer where the ciphertext will be written. It can be longer than needed.</param>
        /// <param name="plaintext">The message to encrypt.</param>
        /// <param name="key">The secret encryption key (32 bytes).</param>
        /// <param name="mac">
        /// Optional. If provided, the encryption is done in detached mode and the MAC (16 bytes) is written here.
        /// Otherwise, combined mode is used.
        /// </param>
        /// <param name="aad">
        /// Optional additional authenticated data. Not encrypted, but authenticated.
        /// </param>
        /// <param name="nonce">
        /// Optional nonce (12 bytes). If not provided, a random nonce is generated and prepended (combined) or returned (detached).
        /// </param>
        /// <returns>
        /// The span representing the full ciphertext, including MAC and possibly nonce.
        /// </returns>
        /// <exception cref="ArgumentException">Thrown when buffer sizes are incorrect or parameters are invalid.</exception>
        /// <exception cref="LibSodiumException">Thrown when encryption fails.</exception>
        public static Span<byte> Encrypt(
            Span<byte> ciphertext,
            ReadOnlySpan<byte> plaintext,
            ReadOnlySpan<byte> key,
            Span<byte> mac = default,
            ReadOnlySpan<byte> aad = default,
            ReadOnlySpan<byte> nonce = default)
            => AeadCore<LowLevel.Aes256Gcm>.Encrypt(ciphertext, plaintext, key, mac, aad, nonce);

        /// <summary>
        /// Decrypts a message using AES256-GCM. Supports combined and detached modes,
        /// with optional AAD and nonce.
        /// </summary>
        /// <param name="plaintext">The buffer where the decrypted message will be written.</param>
        /// <param name="ciphertext">
        /// The encrypted message. May include MAC and nonce (combined) or exclude them (detached).
        /// </param>
        /// <param name="key">The secret decryption key (32 bytes).</param>
        /// <param name="mac">
        /// Optional. If provided, decryption is done in detached mode. Otherwise, combined mode is used..
        /// </param>
        /// <param name="aad">
        /// Optional additional authenticated data. Must match what was used for encryption.
        /// </param>
        /// <param name="nonce">
        /// Optional nonce (12 bytes). Required for manual nonce mode.
        /// </param>
        /// <returns>The span representing the decrypted plaintext.</returns>
        /// <exception cref="ArgumentException">Thrown when buffer sizes are incorrect or parameters are invalid.</exception>
        /// <exception cref="LibSodiumException">Thrown when MAC verification fails or decryption fails.</exception>
        public static Span<byte> Decrypt(
            Span<byte> plaintext,
            ReadOnlySpan<byte> ciphertext,
            ReadOnlySpan<byte> key,
            ReadOnlySpan<byte> mac = default,
            ReadOnlySpan<byte> aad = default,
            ReadOnlySpan<byte> nonce = default)
            => AeadCore<LowLevel.Aes256Gcm>.Decrypt(plaintext, ciphertext, key, mac, aad, nonce);
    }

    /// <summary>
    /// Provides high-level access to the IETF variant of the ChaCha20-Poly1305 AEAD construction from Libsodium.
    /// </summary>
    /// <remarks>
    /// This class supports both combined and detached modes of authenticated encryption.
    /// It also supports automatic nonce generation when not provided explicitly.
    /// </remarks>
    public static class ChaCha20Poly1305Ietf
    {
        /// <summary>
        /// Key length in bytes (32).
        /// </summary>
        public static int KeyLen => LowLevel.ChaCha20Poly1305Ietf.KeyLen;

        /// <summary>
        /// Nonce length in bytes (12).
        /// </summary>
        public static int NonceLen => LowLevel.ChaCha20Poly1305Ietf.NonceLen;

        /// <summary>
        /// MAC length in bytes (16).
        /// </summary>
        public static int MacLen => LowLevel.ChaCha20Poly1305Ietf.MacLen;

        /// <summary>
        /// Encrypts a message using IETF variant of the ChaCha20-Poly1305. Supports combined and detached modes,
        /// with optional AAD and nonce.
        /// </summary>
        /// <param name="ciphertext">The buffer where the ciphertext will be written. It can be longer than needed.</param>
        /// <param name="plaintext">The message to encrypt.</param>
        /// <param name="key">The secret encryption key (32 bytes).</param>
        /// <param name="mac">
        /// Optional. If provided, the encryption is done in detached mode and the MAC (16 bytes) is written here.
        /// Otherwise, combined mode is used.
        /// </param>
        /// <param name="aad">
        /// Optional additional authenticated data. Not encrypted, but authenticated.
        /// </param>
        /// <param name="nonce">
        /// Optional nonce (12 bytes). If not provided, a random nonce is generated and prepended (combined) or returned (detached).
        /// </param>
        /// <returns>
        /// The span representing the full ciphertext, including MAC and possibly nonce.
        /// </returns>
        /// <exception cref="ArgumentException">Thrown when buffer sizes are incorrect or parameters are invalid.</exception>
        /// <exception cref="LibSodiumException">Thrown when encryption fails.</exception>
        public static Span<byte> Encrypt(
            Span<byte> ciphertext,
            ReadOnlySpan<byte> plaintext,
            ReadOnlySpan<byte> key,
            Span<byte> mac = default,
            ReadOnlySpan<byte> aad = default,
            ReadOnlySpan<byte> nonce = default)
            => AeadCore<LowLevel.ChaCha20Poly1305Ietf>.Encrypt(ciphertext, plaintext, key, mac, aad, nonce);

        /// <summary>
        /// Decrypts a message using IETF variant of the ChaCha20-Poly1305. Supports combined and detached modes,
        /// with optional AAD and nonce.
        /// </summary>
        /// <param name="plaintext">The buffer where the decrypted message will be written.</param>
        /// <param name="ciphertext">
        /// The encrypted message. May include MAC and nonce (combined) or exclude them (detached).
        /// </param>
        /// <param name="key">The secret decryption key (32 bytes).</param>
        /// <param name="mac">
        /// Optional. If provided, decryption is done in detached mode. Otherwise, combined mode is used..
        /// </param>
        /// <param name="aad">
        /// Optional additional authenticated data. Must match what was used for encryption.
        /// </param>
        /// <param name="nonce">
        /// Optional nonce (12 bytes). Required for manual nonce mode.
        /// </param>
        /// <returns>The span representing the decrypted plaintext.</returns>
        /// <exception cref="ArgumentException">Thrown when buffer sizes are incorrect or parameters are invalid.</exception>
        /// <exception cref="LibSodiumException">Thrown when MAC verification fails or decryption fails.</exception>
        public static Span<byte> Decrypt(
            Span<byte> plaintext,
            ReadOnlySpan<byte> ciphertext,
            ReadOnlySpan<byte> key,
            ReadOnlySpan<byte> mac = default,
            ReadOnlySpan<byte> aad = default,
            ReadOnlySpan<byte> nonce = default)
            => AeadCore<LowLevel.ChaCha20Poly1305Ietf>.Decrypt(plaintext, ciphertext, key, mac, aad, nonce);
    }

    /// <summary>
    /// Provides high-level access to the ChaCha20-Poly1305 AEAD construction from Libsodium.
    /// </summary>
    /// <remarks>
    /// This class supports both combined and detached modes of authenticated encryption.
    /// It also supports automatic nonce generation when not provided explicitly.
    /// </remarks>
    public static class ChaCha20Poly1305
    {
        /// <summary>
        /// Key length in bytes (32).
        /// </summary>
        public static int KeyLen => LowLevel.ChaCha20Poly1305.KeyLen;

        /// <summary>
        /// Nonce length in bytes (8).
        /// </summary>
        public static int NonceLen => LowLevel.ChaCha20Poly1305.NonceLen;

        /// <summary>
        /// MAC length in bytes (16).
        /// </summary>
        public static int MacLen => LowLevel.ChaCha20Poly1305.MacLen;

        /// <summary>
        /// Encrypts a message using ChaCha20-Poly1305. Supports combined and detached modes,
        /// with optional AAD and nonce.
        /// </summary>
        /// <param name="ciphertext">The buffer where the ciphertext will be written. It can be longer than needed.</param>
        /// <param name="plaintext">The message to encrypt.</param>
        /// <param name="key">The secret encryption key (32 bytes).</param>
        /// <param name="mac">
        /// Optional. If provided, the encryption is done in detached mode and the MAC (16 bytes) is written here.
        /// Otherwise, combined mode is used.
        /// </param>
        /// <param name="aad">
        /// Optional additional authenticated data. Not encrypted, but authenticated.
        /// </param>
        /// <param name="nonce">
        /// Optional nonce (8 bytes). If not provided, a random nonce is generated and prepended (combined) or returned (detached).
        /// </param>
        /// <returns>
        /// The span representing the full ciphertext, including MAC and possibly nonce.
        /// </returns>
        /// <exception cref="ArgumentException">Thrown when buffer sizes are incorrect or parameters are invalid.</exception>
        /// <exception cref="LibSodiumException">Thrown when encryption fails.</exception>
        public static Span<byte> Encrypt(
            Span<byte> ciphertext,
            ReadOnlySpan<byte> plaintext,
            ReadOnlySpan<byte> key,
            Span<byte> mac = default,
            ReadOnlySpan<byte> aad = default,
            ReadOnlySpan<byte> nonce = default)
            => AeadCore<LowLevel.ChaCha20Poly1305>.Encrypt(ciphertext, plaintext, key, mac, aad, nonce);

        /// <summary>
        /// Decrypts a message using ChaCha20-Poly1305. Supports combined and detached modes,
        /// with optional AAD and nonce.
        /// </summary>
        /// <param name="plaintext">The buffer where the decrypted message will be written.</param>
        /// <param name="ciphertext">
        /// The encrypted message. May include MAC and nonce (combined) or exclude them (detached).
        /// </param>
        /// <param name="key">The secret decryption key (32 bytes).</param>
        /// <param name="mac">
        /// Optional. If provided, decryption is done in detached mode. Otherwise, combined mode is used..
        /// </param>
        /// <param name="aad">
        /// Optional additional authenticated data. Must match what was used for encryption.
        /// </param>
        /// <param name="nonce">
        /// Optional nonce (8 bytes). Required for manual nonce mode.
        /// </param>
        /// <returns>The span representing the decrypted plaintext.</returns>
        /// <exception cref="ArgumentException">Thrown when buffer sizes are incorrect or parameters are invalid.</exception>
        /// <exception cref="LibSodiumException">Thrown when MAC verification fails or decryption fails.</exception>
        public static Span<byte> Decrypt(
            Span<byte> plaintext,
            ReadOnlySpan<byte> ciphertext,
            ReadOnlySpan<byte> key,
            ReadOnlySpan<byte> mac = default,
            ReadOnlySpan<byte> aad = default,
            ReadOnlySpan<byte> nonce = default)
            => AeadCore<LowLevel.ChaCha20Poly1305>.Decrypt(plaintext, ciphertext, key, mac, aad, nonce);
    }

    /// <summary>
    /// Provides high-level access to the AEGIS-128L AEAD construction from Libsodium.
    /// </summary>
    /// <remarks>
    /// This class supports both combined and detached modes of authenticated encryption.
    /// It also supports automatic nonce generation when not provided explicitly.
    /// </remarks>
    public static class Aegis128L
    {
        /// <summary>
        /// Key length in bytes (32).
        /// </summary>
        public static int KeyLen => LowLevel.Aegis128L.KeyLen;

        /// <summary>
        /// Nonce length in bytes (16).
        /// </summary>
        public static int NonceLen => LowLevel.Aegis128L.NonceLen;

        /// <summary>
        /// MAC length in bytes (32).
        /// </summary>
        public static int MacLen => LowLevel.Aegis128L.MacLen;

        /// <summary>
        /// Encrypts a message using AEGIS-128L. Supports combined and detached modes,
        /// with optional AAD and nonce.
        /// </summary>
        /// <param name="ciphertext">The buffer where the ciphertext will be written. It can be longer than needed.</param>
        /// <param name="plaintext">The message to encrypt.</param>
        /// <param name="key">The secret encryption key (32 bytes).</param>
        /// <param name="mac">
        /// Optional. If provided, the encryption is done in detached mode and the MAC (32 bytes) is written here.
        /// Otherwise, combined mode is used.
        /// </param>
        /// <param name="aad">
        /// Optional additional authenticated data. Not encrypted, but authenticated.
        /// </param>
        /// <param name="nonce">
        /// Optional nonce (16 bytes). If not provided, a random nonce is generated and prepended (combined) or returned (detached).
        /// </param>
        /// <returns>
        /// The span representing the full ciphertext, including MAC and possibly nonce.
        /// </returns>
        /// <exception cref="ArgumentException">Thrown when buffer sizes are incorrect or parameters are invalid.</exception>
        /// <exception cref="LibSodiumException">Thrown when encryption fails.</exception>
        public static Span<byte> Encrypt(
            Span<byte> ciphertext,
            ReadOnlySpan<byte> plaintext,
            ReadOnlySpan<byte> key,
            Span<byte> mac = default,
            ReadOnlySpan<byte> aad = default,
            ReadOnlySpan<byte> nonce = default)
            => AeadCore<LowLevel.Aegis128L>.Encrypt(ciphertext, plaintext, key, mac, aad, nonce);

        /// <summary>
        /// Decrypts a message using AEGIS-128L. Supports combined and detached modes,
        /// with optional AAD and nonce.
        /// </summary>
        /// <param name="plaintext">The buffer where the decrypted message will be written.</param>
        /// <param name="ciphertext">
        /// The encrypted message. May include MAC and nonce (combined) or exclude them (detached).
        /// </param>
        /// <param name="key">The secret decryption key (32 bytes).</param>
        /// <param name="mac">
        /// Optional. If provided, decryption is done in detached mode. Otherwise, combined mode is used..
        /// </param>
        /// <param name="aad">
        /// Optional additional authenticated data. Must match what was used for encryption.
        /// </param>
        /// <param name="nonce">
        /// Optional nonce (16 bytes). Required for manual nonce mode.
        /// </param>
        /// <returns>The span representing the decrypted plaintext.</returns>
        /// <exception cref="ArgumentException">Thrown when buffer sizes are incorrect or parameters are invalid.</exception>
        /// <exception cref="LibSodiumException">Thrown when MAC verification fails or decryption fails.</exception>
        public static Span<byte> Decrypt(
            Span<byte> plaintext,
            ReadOnlySpan<byte> ciphertext,
            ReadOnlySpan<byte> key,
            ReadOnlySpan<byte> mac = default,
            ReadOnlySpan<byte> aad = default,
            ReadOnlySpan<byte> nonce = default)
            => AeadCore<LowLevel.Aegis128L>.Decrypt(plaintext, ciphertext, key, mac, aad, nonce);
    }

} // namespace LibSodium
