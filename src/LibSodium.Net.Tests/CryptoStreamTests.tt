<#@ template language="C#" debug="false" hostspecific="false" #>
<#@ output extension=".cs" #>
<#@ import namespace="System" #>

<#
var algorithms = new string[] {
	"CryptoStreamXSalsa20",
	"CryptoStreamSalsa20",
	"CryptoStreamChaCha20",
	"CryptoStreamXChaCha20",
	"CryptoStreamChaCha20Ietf"
};
#>

// <auto-generated />
using System.Text;

namespace LibSodium.Tests;

<# foreach (var algo in algorithms) { #>
public class <#= algo #>Tests
{
	[Test]
	public void EncryptDecrypt_ShouldRoundtrip()
	{
		Span<byte> key = stackalloc byte[<#= algo #>.KeyLen];
		Span<byte> nonce = stackalloc byte[<#= algo #>.NonceLen];
		RandomGenerator.Fill(key);
		RandomGenerator.Fill(nonce);

		var plaintext = Encoding.UTF8.GetBytes("stream cipher test");
		Span<byte> ciphertext = stackalloc byte[plaintext.Length];
		Span<byte> decrypted = stackalloc byte[plaintext.Length];

		<#= algo #>.Encrypt(key, nonce, plaintext, ciphertext);
		<#= algo #>.Decrypt(key, nonce, ciphertext, decrypted);

		decrypted.ShouldBe(plaintext);
	}

	[Test]
	public void GenerateKeystream_ShouldBeDeterministic()
	{
		Span<byte> key = stackalloc byte[<#= algo #>.KeyLen];
		Span<byte> nonce = stackalloc byte[<#= algo #>.NonceLen];
		RandomGenerator.Fill(key);
		RandomGenerator.Fill(nonce);

		Span<byte> keystream1 = stackalloc byte[64];
		Span<byte> keystream2 = stackalloc byte[64];

		<#= algo #>.GenerateKeystream(keystream1, nonce, key);
		<#= algo #>.GenerateKeystream(keystream2, nonce, key);

		keystream1.ShouldBe(keystream2);
	}

	[Test]
	public void Encrypt_InvalidKeyLength_ShouldThrow()
	{
		AssertLite.Throws<ArgumentException>(() =>
		{
			Span<byte> key = stackalloc byte[<#= algo #>.KeyLen - 1];
			Span<byte> nonce = stackalloc byte[<#= algo #>.NonceLen];
			Span<byte> pt = stackalloc byte[16];
			Span<byte> ct = stackalloc byte[16];
			<#= algo #>.Encrypt(key, nonce, pt, ct);
		});
	}

	[Test]
	public void Encrypt_InvalidNonceLength_ShouldThrow()
	{
		AssertLite.Throws<ArgumentException>(() =>
		{
			Span<byte> key = stackalloc byte[<#= algo #>.KeyLen];
			Span<byte> nonce = stackalloc byte[<#= algo #>.NonceLen - 1];
			Span<byte> pt = stackalloc byte[16];
			Span<byte> ct = stackalloc byte[16];
			<#= algo #>.Encrypt(key, nonce, pt, ct);
		});
	}

	[Test]
	public void EncryptDecrypt_Stream_ShouldRoundtrip()
	{
		Span<byte> key = stackalloc byte[<#= algo #>.KeyLen];
		Span<byte> nonce = stackalloc byte[<#= algo #>.NonceLen];
		RandomGenerator.Fill(key);
		RandomGenerator.Fill(nonce);

		var plaintext = Encoding.UTF8.GetBytes("stream test over Stream");
		using var input = new MemoryStream(plaintext);
		using var encrypted = new MemoryStream();
		using var decrypted = new MemoryStream();

		<#= algo #>.Encrypt(key, nonce, input, encrypted);

		encrypted.Position = 0;
		<#= algo #>.Decrypt(key, nonce, encrypted, decrypted);

		var result = decrypted.ToArray();
		result.ShouldBe(plaintext);
	}

	[Test]
	public async Task EncryptDecrypt_StreamAsync_ShouldRoundtrip()
	{
		byte[] key = new byte[<#= algo #>.KeyLen];
		byte[] nonce = new byte[<#= algo #>.NonceLen];
		RandomGenerator.Fill(key);
		RandomGenerator.Fill(nonce);

		var plaintext = Encoding.UTF8.GetBytes("async stream encryption test");
		await using var input = new MemoryStream(plaintext);
		await using var encrypted = new MemoryStream();
		await using var decrypted = new MemoryStream();

		await <#= algo #>.EncryptAsync(key, nonce, input, encrypted);

		encrypted.Position = 0;
		await <#= algo #>.DecryptAsync(key, nonce, encrypted, decrypted);

		var result = decrypted.ToArray();
		result.ShouldBe(plaintext);
	}
}
<# } #>
