<#@ template language="C#" debug="false" hostspecific="false" #>
<#@ output extension=".cs" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>

<#
var algorithms = new[] {
    new {
        Name = "XChaCha20Poly1305",
        LowLevel = "LowLevel.XChaCha20Poly1305",
        AlgorithmDoc = "XChaCha20-Poly1305",
        KeyLen = 32,
        NonceLen = 24,
        MacLen = 16
    },
    new {
        Name = "Aegis256",
        LowLevel = "LowLevel.Aegis256",
        AlgorithmDoc = "AEGIS-256",
        KeyLen = 32,
        NonceLen = 32,
        MacLen = 32
    },
    new {
        Name = "Aes256Gcm",
        LowLevel = "LowLevel.Aes256Gcm",
        AlgorithmDoc = "AES256-GCM",
        KeyLen = 32,
        NonceLen = 12,
        MacLen = 16
    },
    new {
        Name = "ChaCha20Poly1305Ietf",
        LowLevel = "LowLevel.ChaCha20Poly1305Ietf",
        AlgorithmDoc = "IETF variant of the ChaCha20-Poly1305",
        KeyLen = 32,
        NonceLen = 12,
        MacLen = 16
    },
    new {
        Name = "ChaCha20Poly1305",
        LowLevel = "LowLevel.ChaCha20Poly1305",
        AlgorithmDoc = "ChaCha20-Poly1305",
        KeyLen = 32,
        NonceLen = 8,
        MacLen = 16
    },
    new {
        Name = "Aegis128L",
        LowLevel = "LowLevel.Aegis128L",
        AlgorithmDoc = "AEGIS-128L",
        KeyLen = 32,
        NonceLen = 16,
        MacLen = 32
    }
};
#>
// <auto-generated />

namespace LibSodium
{
<#
foreach (var algo in algorithms) {
#>
    /// <summary>
    /// Provides high-level access to the <#= algo.AlgorithmDoc #> AEAD construction from Libsodium.
    /// </summary>
    /// <remarks>
    /// This class supports both combined and detached modes of authenticated encryption.
    /// It also supports automatic nonce generation when not provided explicitly.
    /// </remarks>
    public static class <#= algo.Name #>
    {
        /// <summary>
        /// Key length in bytes (<#= algo.KeyLen #>).
        /// </summary>
        public static int KeyLen => <#= algo.LowLevel #>.KeyLen;

        /// <summary>
        /// Nonce length in bytes (<#= algo.NonceLen #>).
        /// </summary>
        public static int NonceLen => <#= algo.LowLevel #>.NonceLen;

        /// <summary>
        /// MAC length in bytes (<#= algo.MacLen #>).
        /// </summary>
        public static int MacLen => <#= algo.LowLevel #>.MacLen;

        /// <summary>
        /// Encrypts a message using <#= algo.AlgorithmDoc #>. Supports combined and detached modes,
        /// with optional AAD and nonce.
        /// </summary>
        /// <param name="ciphertext">The buffer where the ciphertext will be written. It can be longer than needed.</param>
        /// <param name="plaintext">The message to encrypt.</param>
        /// <param name="key">The secret encryption key (<#= algo.KeyLen #> bytes).</param>
        /// <param name="mac">
        /// Optional. If provided, the encryption is done in detached mode and the MAC (<#= algo.MacLen #> bytes) is written here.
        /// Otherwise, combined mode is used.
        /// </param>
        /// <param name="aad">
        /// Optional additional authenticated data. Not encrypted, but authenticated.
        /// </param>
        /// <param name="nonce">
        /// Optional nonce (<#= algo.NonceLen #> bytes). If not provided, a random nonce is generated and prepended.
        /// </param>
        /// <returns>
        /// The span representing the full ciphertext, including MAC and possibly nonce.
        /// </returns>
        /// <exception cref="ArgumentException">Thrown when buffer sizes are incorrect or parameters are invalid.</exception>
        /// <exception cref="LibSodiumException">Thrown when encryption fails.</exception>
        public static Span<byte> Encrypt(
            Span<byte> ciphertext,
            ReadOnlySpan<byte> plaintext,
            ReadOnlySpan<byte> key,
            Span<byte> mac = default,
            ReadOnlySpan<byte> aad = default,
            ReadOnlySpan<byte> nonce = default)
            => AeadCore<<#= algo.LowLevel #>>.Encrypt(ciphertext, plaintext, key, mac, aad, nonce);

                /// <summary>
        /// Encrypts a message using <#= algo.AlgorithmDoc #>. Supports combined and detached modes,
        /// with optional AAD and nonce.
        /// </summary>
        /// <param name="ciphertext">The buffer where the ciphertext will be written. It can be longer than needed.</param>
        /// <param name="plaintext">The message to encrypt.</param>
        /// <param name="key">The secret encryption key (<#= algo.KeyLen #> bytes).</param>
        /// <param name="mac">
        /// Optional. If provided, the encryption is done in detached mode and the MAC (<#= algo.MacLen #> bytes) is written here.
        /// Otherwise, combined mode is used.
        /// </param>
        /// <param name="aad">
        /// Optional additional authenticated data. Not encrypted, but authenticated.
        /// </param>
        /// <param name="nonce">
        /// Optional nonce (<#= algo.NonceLen #> bytes). If not provided, a random nonce is generated and prepended.
        /// </param>
        /// <returns>
        /// The span representing the full ciphertext, including MAC and possibly nonce.
        /// </returns>
        /// <exception cref="ArgumentException">Thrown when buffer sizes are incorrect or parameters are invalid.</exception>
        /// <exception cref="LibSodiumException">Thrown when encryption fails.</exception>
        public static Span<byte> Encrypt(
            Span<byte> ciphertext,
            ReadOnlySpan<byte> plaintext,
            SecureMemory<byte> key,
            Span<byte> mac = default,
            ReadOnlySpan<byte> aad = default,
            ReadOnlySpan<byte> nonce = default)
            => AeadCore<<#= algo.LowLevel #>>.Encrypt(ciphertext, plaintext, key, mac, aad, nonce);

        /// <summary>
        /// Decrypts a message using <#= algo.AlgorithmDoc #>. Supports combined and detached modes,
        /// with optional AAD and nonce.
        /// </summary>
        /// <param name="plaintext">The buffer where the decrypted message will be written.</param>
        /// <param name="ciphertext">
        /// The encrypted message. May include MAC and nonce (combined) or exclude them (detached).
        /// </param>
        /// <param name="key">The secret decryption key (<#= algo.KeyLen #> bytes).</param>
        /// <param name="mac">
        /// Optional. If provided, decryption is done in detached mode. Otherwise, combined mode is used..
        /// </param>
        /// <param name="aad">
        /// Optional additional authenticated data. Must match what was used for encryption.
        /// </param>
        /// <param name="nonce">
        /// Optional nonce (<#= algo.NonceLen #> bytes). Required for manual nonce mode.
        /// </param>
        /// <returns>The span representing the decrypted plaintext.</returns>
        /// <exception cref="ArgumentException">Thrown when buffer sizes are incorrect or parameters are invalid.</exception>
        /// <exception cref="LibSodiumException">Thrown when MAC verification fails or decryption fails.</exception>
        public static Span<byte> Decrypt(
            Span<byte> plaintext,
            ReadOnlySpan<byte> ciphertext,
            ReadOnlySpan<byte> key,
            ReadOnlySpan<byte> mac = default,
            ReadOnlySpan<byte> aad = default,
            ReadOnlySpan<byte> nonce = default)
            => AeadCore<<#= algo.LowLevel #>>.Decrypt(plaintext, ciphertext, key, mac, aad, nonce);

                /// <summary>
        /// Decrypts a message using <#= algo.AlgorithmDoc #>. Supports combined and detached modes,
        /// with optional AAD and nonce.
        /// </summary>
        /// <param name="plaintext">The buffer where the decrypted message will be written.</param>
        /// <param name="ciphertext">
        /// The encrypted message. May include MAC and nonce (combined) or exclude them (detached).
        /// </param>
        /// <param name="key">The secret decryption key (<#= algo.KeyLen #> bytes).</param>
        /// <param name="mac">
        /// Optional. If provided, decryption is done in detached mode. Otherwise, combined mode is used..
        /// </param>
        /// <param name="aad">
        /// Optional additional authenticated data. Must match what was used for encryption.
        /// </param>
        /// <param name="nonce">
        /// Optional nonce (<#= algo.NonceLen #> bytes). Required for manual nonce mode.
        /// </param>
        /// <returns>The span representing the decrypted plaintext.</returns>
        /// <exception cref="ArgumentException">Thrown when buffer sizes are incorrect or parameters are invalid.</exception>
        /// <exception cref="LibSodiumException">Thrown when MAC verification fails or decryption fails.</exception>
        public static Span<byte> Decrypt(
            Span<byte> plaintext,
            ReadOnlySpan<byte> ciphertext,
            SecureMemory<byte> key,
            ReadOnlySpan<byte> mac = default,
            ReadOnlySpan<byte> aad = default,
            ReadOnlySpan<byte> nonce = default)
            => AeadCore<<#= algo.LowLevel #>>.Decrypt(plaintext, ciphertext, key, mac, aad, nonce);
    }

<# } #>
} // namespace LibSodium
